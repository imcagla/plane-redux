_eb0‍.x([["addPost",()=>addPost],["removePost",()=>removePost],["updatePost",()=>updatePost],["addComment",()=>addComment],["removeComment",()=>removeComment],["removeUserComments",()=>removeUserComments],["addUpVote",()=>addUpVote],["addDownVote",()=>addDownVote],["default",()=>_eb0‍.o]]);// {id, title, comments: [{id:1, userId: 1, comment: "d"}], {votes: {up: 0, down: 0}}}

// ACTION TYPES
// ADD_POST, REMOVE_POST(id), UPDATE_POST(id, title), ADD_COMMENT(id, userid, comment), REMOVE_COMMENT(id), REMOVE_USER_COMMENTS(userid), ADD_UP_VOTE, ADD_DOWN_VOTE(id)

const ADD_POST = "ADD_POST"
const REMOVE_POST = "REMOVE_POST"
const UPDATE_POST = "UPDATE_POST"
const ADD_COMMENT = "ADD_COMMENT"
const REMOVE_COMMENT = "REMOVE_COMMENT"
const REMOVE_USER_COMMENTS = "REMOVE_USER_COMMENTS"
const ADD_UP_VOTE = "ADD_UP_VOTE"
const ADD_DOWN_VOTE = "ADD_DOWN_VOTE"

// ACTION CREATORS
       const addPost = (id, title) => ({
    type: ADD_POST,
    payload: {id, title, comments: [], votes: {up: 0, down: 0}}
})

       const removePost = (id) => ({
    type: REMOVE_POST,
    payload: id
})

       const updatePost = (id, title) => ({
    type: UPDATE_POST,
    payload: {
        id,
        title
    }
})

       const addComment = (id, userId, comment) => ({
    type: ADD_COMMENT,
    payload: {
        id,
        userId,
        comment
    }
})

       const removeComment = (id, commentId) => ({
    type: REMOVE_COMMENT,
    payload: {id, commentId}
})

       const removeUserComments = (userId) => ({
    type: REMOVE_USER_COMMENTS,
    payload: userId
})

       const addUpVote = (id) => ({
    type: ADD_UP_VOTE,
    payload: id
})

       const addDownVote = (id) => ({
    type: ADD_DOWN_VOTE,
    payload: id
})

// REDUCER
const postReducer = (posts= [], action) => {
    switch(action.type){
        case ADD_POST:
            return [...posts, action.payload]
        case REMOVE_POST:
            return posts.filter(item => item.id !== action.payload)
        case UPDATE_POST:
            return posts.map(item => item.id === action.payload.id ? {...item, title: action.payload.title} : {...item})
        case ADD_COMMENT:
            return posts.map(item => item.id === action.payload.id ? {...item, comments: [...item.comments,{id: item.comments.length, userId: action.payload.userId, comment: action.payload.comment}]} : {...item})
        case REMOVE_COMMENT:
            return posts.map(item => item.id === action.payload.id ? {...item, comments: item.comments.filter(item => item.id !== action.payload.commentId)} : {...item})
        case REMOVE_USER_COMMENTS:
            return posts.map(post => post ? {...post, comments: post.comments.filter(item => item.userId !== action.payload)}: {...post})
        case ADD_UP_VOTE:
            return posts.map(item => item.id === action.payload ? 
                {...item, votes:{...item.votes, up: item.votes.up+1}} : {...item} )
        case ADD_DOWN_VOTE:
            return posts.map(item => item.id === action.payload ? 
                {...item, votes:{...item.votes, down: item.votes.down+1}}: {...item})
        default:
            return posts
    }
}


_eb0‍.d(postReducer);